<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <meta name="theme-color" content="#1a1a1a"/>
  <title>juA.kali Innovation Platform</title>

  <!-- External Dependencies -->
  <script defer src="https://cdn.jsdelivr.net/npm/onnxruntime-web@1.16.1/dist/ort.min.js"></script>
  <script type="module" src="https://cdn.jsdelivr.net/npm/@xenova/transformers@2.6.0"></script>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">

  <!-- Payment Processors -->
  <script src="https://js.paystack.co/v1/inline.js"></script>
  <script src="https://js.stripe.com/v3/"></script>

  <!-- React for Payment Modal -->
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <style>
    :root {
      --primary-color: #4285f4;
      --dark-bg: #1a1a1a;
      --light-text: #ffffff;
      --accent-green: #00C853;
      --accent-blue: #2962FF;
      --transition-speed: 0.3s;
      --chat-border: 1px solid #00C853;
    }

    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background-color: var(--dark-bg);
      color: var(--light-text);
      overflow-x: hidden;
    }

    .logo {
      position: fixed;
      top: 20px;
      left: 30px;
      font-size: 1.5rem;
      font-weight: 700;
      z-index: 1000;
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .nav-menu {
      position: fixed;
      top: 20px;
      right: 30px;
      display: flex;
      gap: 20px;
      z-index: 1000;
    }

    .nav-menu button {
      background: none;
      border: none;
      color: var(--light-text);
      cursor: pointer;
      padding: 10px 20px;
      border-radius: 25px;
      transition: all var(--transition-speed) ease;
    }

    .nav-menu button:hover {
      background-color: rgba(255, 255, 255, 0.1);
      transform: translateY(-2px);
    }

    .widget {
      height: 100vh;
      width: 100vw;
      position: relative;
      scroll-snap-align: start;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .widget-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      position: absolute;
      top: 0;
      left: 0;
    }

    .widget-content {
      position: relative;
      z-index: 2;
      text-align: center;
      padding: 2rem;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 20px;
      backdrop-filter: blur(10px);
    }

    .widget-content h2 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(45deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .overlay-button {
      position: absolute;
      bottom: 6%;
      left: 50%;
      transform: translateX(-50%);
      padding: 15px 40px;
      background-color: var(--accent-blue);
      color: white;
      border: none;
      border-radius: 30px;
      cursor: pointer;
      font-size: 1.1rem;
      transition: all var(--transition-speed) ease;
    }

    .overlay-button:hover {
      background-color: #1e50cc;
      transform: translateX(-50%) scale(1.05);
    }

    footer {
      position: fixed;
      bottom: 0;
      width: 100%;
      padding: 20px;
      text-align: center;
      background-color: rgba(0, 0, 0, 0.7);
      backdrop-filter: blur(10px);
    }

    .chat-box {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 320px;
      height: 450px;
      background-color: rgba(255, 255, 255, 0.95);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      border-radius: 12px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      opacity: 0;
      transform: translateY(20px);
      animation: fadeIn 0.5s forwards;
    }

    @keyframes fadeIn {
      to { opacity: 1; transform: translateY(0); }
    }

    .chat-box .messages {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      background-color: #f5f5f5;
      color: #333;
    }

    .chat-box .message {
      padding: 10px;
      margin: 8px 0;
      border-radius: 8px;
      max-width: 80%;
      word-wrap: break-word;
      animation: messageSlide 0.3s ease-out;
    }

    @keyframes messageSlide {
      from { transform: translateY(20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }

    .chat-box .message.user {
      background: var(--accent-blue);
      color: white;
      margin-left: auto;
    }

    .chat-box .message.reply {
      background: var(--accent-green);
      color: white;
      margin-right: auto;
    }

    .chat-box .message.error {
      background: #ff4444;
      color: white;
      margin-right: auto;
    }

    .chat-box input {
      width: calc(100% - 20px);
      margin: 10px;
      padding: 12px;
      border: var(--chat-border);
      border-radius: 8px;
      font-size: 14px;
      background: white;
    }

    .chat-box button {
      margin: 0 10px 10px;
      padding: 12px;
      background: var(--accent-green);
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background var(--transition-speed);
    }

    .chat-box button:hover {
      background: #009245;
    }

    .api-key-input {
      position: fixed;
      top: 120px;
      right: 30px;
      z-index: 1000;
      background: rgba(0, 0, 0, 0.9);
      padding: 15px;
      border-radius: 12px;
      color: white;
      backdrop-filter: blur(5px);
      display: none;
      flex-direction: column;
      gap: 10px;
      width: 300px;
    }

    .api-key-input input {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--accent-green);
      color: white;
      padding: 8px 12px;
      border-radius: 6px;
      width: 100%;
      box-sizing: border-box;
    }

    .api-key-input input::placeholder {
      color: rgba(255, 255, 255, 0.7);
    }

    #save-status {
      font-size: 0.9rem;
      text-align: center;
    }

    .model-status {
      position: fixed;
      bottom: 80px;
      left: 30px;
      padding: 8px 15px;
      background: rgba(0, 0, 0, 0.7);
      border-radius: 20px;
      font-size: 0.9rem;
    }

    .model-selector {
      position: fixed;
      top: 80px;
      right: 30px;
      z-index: 1000;
      background: rgba(0, 0, 0, 0.7);
      padding: 8px 15px;
      border-radius: 20px;
    }

    .progress-bar {
      width: 100%;
      height: 6px;
      background-color: rgba(255, 255, 255, 0.2);
      border-radius: 3px;
      overflow: hidden;
      margin-top: 10px;
    }

    .progress-fill {
      height: 100%;
      background-color: var(--accent-green);
      width: 0%;
      transition: width 0.3s ease;
    }

    /* Payment Modal Styles */
    .payment-modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 2000;
      backdrop-filter: blur(5px);
    }

    .payment-modal {
      background-color: #2a2a2a;
      padding: 30px;
      border-radius: 12px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
      color: white;
      text-align: center;
      position: relative;
    }

    .payment-modal h2 {
      margin-top: 0;
      color: #4285f4;
    }

    .payment-modal p {
      margin-bottom: 25px;
      color: #ccc;
    }

    .payment-email {
      margin-bottom: 20px;
      text-align: left;
    }

    .payment-email label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
    }

    .payment-email input {
      width: 100%;
      padding: 12px;
      border-radius: 6px;
      border: 1px solid #444;
      background-color: #1a1a1a;
      color: white;
      font-size: 16px;
    }

    .payment-methods {
      display: flex;
      gap: 10px;
      margin-bottom: 25px;
      justify-content: center;
    }

    .payment-methods button {
      padding: 10px 20px;
      border-radius: 6px;
      background-color: #333;
      color: white;
      border: none;
      cursor: pointer;
      transition: all 0.3s;
    }

    .payment-methods button.active {
      background-color: #4285f4;
    }

    .pay-button {
      background-color: #00C853;
      color: white;
      border: none;
      padding: 12px 30px;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      width: 100%;
      margin-bottom: 15px;
      transition: background-color 0.3s;
    }

    .pay-button:hover {
      background-color: #009245;
    }

    .pay-button:disabled {
      background-color: #555;
      cursor: not-allowed;
    }

    .close-button {
      background: none;
      border: 1px solid #666;
      color: #ccc;
      padding: 8px 20px;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.3s;
    }

    .close-button:hover {
      background-color: #333;
    }

    .payment-success {
      padding: 20px;
    }

    .payment-success h2 {
      color: #00C853;
    }

    .loader {
      border: 4px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top: 4px solid #4285f4;
      width: 30px;
      height: 30px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    @media (max-width: 768px) {
      .chat-box {
        width: 90%;
        right: 5%;
        height: 60vh;
      }

      .nav-menu {
        flex-direction: column;
        right: 10px;
        top: 60px;
      }

      .model-selector {
        top: 140px;
        right: 10px;
      }

      .api-key-input {
        top: 180px;
        right: 10px;
        width: 80%;
      }

      .payment-modal {
        padding: 20px;
        width: 95%;
      }
      
      .payment-methods {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="logo">juA.kali iNC</div>

  <nav class="nav-menu">
    <button id="consultation-tab">Consultation</button>
    <button id="discoveries-tab">Discoveries</button>
    <button id="courses-tab">Courses</button>
    <button id="about-us-tab">About Us</button>
    <button id="contact-tab">Contact</button>
  </nav>

  <div class="model-selector">
    <select id="model-select">
      <option value="local">Local Model (LaMini-Flan-T5)</option>
      <option value="mindsdb">Cloud Model (GPT-3.5)</option>
      <option value="mock">Demo Mode</option>
    </select>
    <button onclick="toggleApiKeyInput()">API Settings</button>
  </div>

  <div class="api-key-input" id="api-key-container">
    <input type="password" id="api-key" placeholder="MindsDB API Key">
    <input type="text" id="base-url" placeholder="Base URL (e.g. https://llm.mdb.ai/)">
    <input type="text" id="assistant-id" placeholder="Assistant ID (GPT-3.5 Model Name)">
    <button type="button" onclick="saveApiKey()">Save</button>
    <div id="save-status"></div>
  </div>

  <main>
    <section class="widget" id="widget1">
      <div class="widget-content">
        <h2>Innovation Hub</h2>
        <p>Discover cutting-edge technologies and breakthrough innovations</p>
      </div>
      <button class="overlay-button" id="explore-btn">Explore Innovations</button>
    </section>
    <section class="widget" id="widget2">
      <div class="widget-content">
        <h2>Technology Preview</h2>
        <p>Experience the future of technology today</p>
      </div>
    </section>
    <section class="widget" id="widget3">
      <div class="widget-content">
        <h2>Research & Development</h2>
        <p>Advancing the frontiers of knowledge and innovation</p>
      </div>
    </section>
  </main>

  <footer>
    <p>&copy; 2025 juA.kali iNC. All rights reserved.</p>
  </footer>

  <div class="chat-box">
    <div class="messages" id="chat-messages">
      <div class="welcome-message">
        <h3>Welcome to juA.kali AI Assistant</h3>
        <p>Ask me anything about technology, innovation, or general topics!</p>
      </div>
    </div>
    <input type="text" id="chat-input" placeholder="Ask our AI assistant...">
    <button id="send-message">Send</button>
  </div>

  <div class="model-status" id="model-status">
    Initializing AI...
    <div class="progress-bar" id="progress-bar">
      <div class="progress-fill" id="progress-fill"></div>
    </div>
  </div>
  
  <!-- Payment Modal Container -->
  <div id="payment-root"></div>

  <!-- Main Application Script -->

<script>
    // Enhanced Configuration Manager with improved storage handling
    class ConfigManager {
      static STORAGE_KEY = 'juakali-ai-config-v4';

      static load() {
        try {
          const stored = localStorage.getItem(this.STORAGE_KEY) || '{}';
          const config = JSON.parse(stored);
          return {
            apiKey: config.apiKey || '',
            baseUrl: config.baseUrl || 'https://llm.mdb.ai/',
            assistantId: config.assistantId || 'gpt-3.5-turbo',
            modelChoice: config.modelChoice || 'mock',
            lastUpdated: config.lastUpdated || 0,
            theme: config.theme || 'dark',
            maxTokens: config.maxTokens || 300,
            temperature: config.temperature || 0.7
          };
        } catch (error) {
          console.warn('Config load error:', error);
          return this.getDefaults();
        }
      }

      static save(config) {
        try {
          const fullConfig = { 
            ...this.load(), 
            ...config, 
            lastUpdated: Date.now() 
          };
          
          localStorage.setItem(this.STORAGE_KEY, JSON.stringify(fullConfig));
          return fullConfig;
        } catch (error) {
          console.warn('Config save error:', error);
          return config;
        }
      }

      static getDefaults() {
        return {
          apiKey: '',
          baseUrl: 'https://llm.mdb.ai/',
          assistantId: 'gpt-3.5-turbo',
          modelChoice: 'mock',
          lastUpdated: 0,
          theme: 'dark',
          maxTokens: 300,
          temperature: 0.7
        };
      }

      static validate(config) {
        const errors = [];
        
        if (!config.apiKey && config.modelChoice === 'mindsdb') {
          errors.push('API key required for cloud models');
        }
        
        if (!config.baseUrl) {
          errors.push('Base URL required');
        } else {
          try {
            new URL(config.baseUrl);
          } catch (e) {
            errors.push('Invalid base URL format');
          }
        }
        
        if (!config.assistantId) {
          errors.push('Model name required');
        }

        if (config.maxTokens && (config.maxTokens < 10 || config.maxTokens > 4000)) {
          errors.push('Max tokens must be between 10 and 4000');
        }

        if (config.temperature && (config.temperature < 0 || config.temperature > 2)) {
          errors.push('Temperature must be between 0 and 2');
        }

        return { isValid: errors.length === 0, errors };
      }

      static reset() {
        try {
          localStorage.removeItem(this.STORAGE_KEY);
          return this.getDefaults();
        } catch (error) {
          console.warn('Config reset error:', error);
          return this.getDefaults();
        }
      }
    }

    // Enhanced API Client with retry logic and better error handling
    class APIClient {
      constructor(config) {
        this.config = config;
        this.controller = null;
        this.retryAttempts = 3;
        this.retryDelay = 1000;
      }

      async sendMessage(message, onProgress = null) {
        return this.executeWithRetry(() => this._sendMessageAttempt(message, onProgress));
      }

      async executeWithRetry(operation, attempt = 1) {
        try {
          return await operation();
        } catch (error) {
          if (attempt < this.retryAttempts && this.isRetryableError(error)) {
            console.warn(`Attempt ${attempt} failed, retrying...`, error.message);
            await this.delay(this.retryDelay * attempt);
            return this.executeWithRetry(operation, attempt + 1);
          }
          throw error;
        }
      }

      isRetryableError(error) {
        const retryableErrors = [
          'NetworkError',
          'Failed to fetch',
          'Request timed out',
          'Connection refused',
          'Service unavailable'
        ];
        return retryableErrors.some(retryable => 
          error.message.toLowerCase().includes(retryable.toLowerCase())
        );
      }

      async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
      }

      async _sendMessageAttempt(message, onProgress) {
        if (this.controller) {
          this.controller.abort();
        }
        
        this.controller = new AbortController();
        const timeoutId = setTimeout(() => this.controller.abort(), 45000);

        try {
          const url = `${this.config.baseUrl.replace(/\/$/, '')}/v1/chat/completions`;
          
          const requestBody = {
            model: this.config.assistantId,
            messages: [
              {
                role: 'system',
                content: this.getSystemPrompt()
              },
              { role: 'user', content: message }
            ],
            max_tokens: this.config.maxTokens || 300,
            temperature: this.config.temperature || 0.7,
            top_p: 0.9,
            presence_penalty: 0.1,
            frequency_penalty: 0.1
          };

          const response = await fetch(url, {
            method: 'POST',
            headers: this.getHeaders(),
            body: JSON.stringify(requestBody),
            signal: this.controller.signal
          });

    // Function to create minimal chat interface HTML if missing
    function createMinimalChatInterface() {
      const chatContainer = document.getElementById('chat-container');
      if (!chatContainer) return;

      // Create required elements if they don't exist
      if (!document.getElementById('chat-form')) {
        const chatForm = document.createElement('form');
        chatForm.id = 'chat-form';
        chatForm.innerHTML = `
          <div style="display: flex; gap: 10px; margin-top: 20px;">
            <textarea 
              id="message-input" 
              placeholder="Type your message here..." 
              style="flex: 1; padding: 10px; border-radius: 8px; border: 1px solid #ddd; resize: vertical; min-height: 40px;"
            ></textarea>
            <button 
              id="send-button" 
              type="submit" 
              style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 8px; cursor: pointer;"
            >
              <span class="button-text">Send</span>
              <span class="button-spinner" style="display: none;">⏳</span>
            </button>
          </div>
        `;
        chatContainer.appendChild(chatForm);
      }

      // Add status and controls if missing
      if (!document.getElementById('model-status')) {
        const controlsDiv = document.createElement('div');
        controlsDiv.innerHTML = `
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background: #f5f5f5; border-radius: 8px;">
            <span id="model-status">🎭 Demo Mode</span>
            <div>
              <button id="settings-toggle" style="margin-right: 10px; padding: 5px 10px; border: 1px solid #ddd; background: white; border-radius: 4px; cursor: pointer;">⚙️</button>
              <button id="clear-chat" style="margin-right: 10px; padding: 5px 10px; border: 1px solid #ddd; background: white; border-radius: 4px; cursor: pointer;">🗑️</button>
              <button id="theme-toggle" style="padding: 5px 10px; border: 1px solid #ddd; background: white; border-radius: 4px; cursor: pointer;">🌙</button>
            </div>
          </div>
        `;
        chatContainer.insertBefore(controlsDiv, chatContainer.firstChild);
      }

      // Add settings modal if missing
      if (!document.getElementById('settings-modal')) {
        const settingsModal = document.createElement('div');
        settingsModal.id = 'settings-modal';
        settingsModal.style.cssText = `
          display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
          background: rgba(0,0,0,0.5); z-index: 1000;
        `;
        settingsModal.innerHTML = `
          <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 10px; width: 90%; max-width: 500px;">
            <h3>Settings</h3>
            <form id="settings-form">
              <div style="margin-bottom: 15px;">
                <label>Model Choice:</label>
                <select id="model-choice" name="model-choice" style="width: 100%; padding: 8px; margin-top: 5px;">
                  <option value="mock">Demo Mode</option>
                  <option value="mindsdb">Cloud API</option>
                  <option value="local">Local Model</option>
                </select>
              </div>
              <div style="margin-bottom: 15px;">
                <label>API Key:</label>
                <input type="password" id="api-key" name="api-key" placeholder="Enter API key for cloud mode" style="width: 100%; padding: 8px; margin-top: 5px;">
              </div>
              <div style="margin-bottom: 15px;">
                <label>Base URL:</label>
                <input type="url" id="base-url" name="base-url" value="https://llm.mdb.ai/" style="width: 100%; padding: 8px; margin-top: 5px;">
              </div>
              <div style="margin-bottom: 15px;">
                <label>Model Name:</label>
                <input type="text" id="assistant-id" name="assistant-id" value="gpt-3.5-turbo" style="width: 100%; padding: 8px; margin-top: 5px;">
              </div>
              <div style="margin-bottom: 15px;">
                <label>Max Tokens:</label>
                <input type="number" id="max-tokens" name="max-tokens" value="300" min="10" max="4000" style="width: 100%; padding: 8px; margin-top: 5px;">
              </div>
              <div style="margin-bottom: 15px;">
                <label>Temperature:</label>
                <input type="number" id="temperature" name="temperature" value="0.7" min="0" max="2" step="0.1" style="width: 100%; padding: 8px; margin-top: 5px;">
              </div>
              <div style="text-align: right;">
                <button type="button" onclick="document.getElementById('settings-modal').style.display='none'" style="margin-right: 10px; padding: 8px 16px; border: 1px solid #ddd; background: white; border-radius: 4px;">Cancel</button>
                <button type="submit" style="padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 4px;">Save</button>
              </div>
            </form>
          </div>
        `;
        document.body.appendChild(settingsModal);
      }

      // Add progress bar if missing
      if (!document.getElementById('progress-bar')) {
        const progressBar = document.createElement('div');
        progressBar.id = 'progress-bar';
        progressBar.style.cssText = 'display: none; background: #f0f0f0; height: 4px; border-radius: 2px; margin: 10px 0; overflow: hidden;';
        progressBar.innerHTML = '<div id="progress-fill" style="height: 100%; background: #007bff; width: 0%; transition: width 0.3s;"></div>';
        chatContainer.insertBefore(progressBar, chatContainer.firstChild);
      }
    }

          clearTimeout(timeoutId);

          if (!response.ok) {
            const errorDetails = await this.parseErrorResponse(response);
            throw new Error(errorDetails.message);
          }

          const data = await response.json();
          return this.extractResponseContent(data);

        } catch (error) {
          clearTimeout(timeoutId);
          throw this.handleRequestError(error);
        }
      }

      getSystemPrompt() {
        return `You are a helpful AI assistant for the juA.kali Innovation Platform. 
        You provide informative, engaging, and well-structured responses about technology, 
        innovation, research, and general topics. 
        
        Guidelines:
        - Keep responses concise but comprehensive
        - Use clear, accessible language
        - Provide practical insights when possible
        - Be encouraging and supportive
        - If uncertain, acknowledge limitations`;
      }

      getHeaders() {
        return {
          'Authorization': `Bearer ${this.config.apiKey}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'juAkali-AI-Chat/2.0',
          'X-Request-ID': this.generateRequestId()
        };
      }

      generateRequestId() {
        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      }

      async parseErrorResponse(response) {
        try {
          const errorText = await response.text();
          const errorData = JSON.parse(errorText);
          return {
            status: response.status,
            message: errorData.error?.message || errorData.message || `HTTP ${response.status}: ${response.statusText}`
          };
        } catch (e) {
          return {
            status: response.status,
            message: `HTTP ${response.status}: ${response.statusText || 'Unknown error'}`
          };
        }
      }

      extractResponseContent(data) {
        const content = data.choices?.[0]?.message?.content;
        
        if (!content) {
          throw new Error('No response content received from API');
        }

        return {
          content: content.trim(),
          usage: data.usage,
          model: data.model
        };
      }

      handleRequestError(error) {
        if (error.name === 'AbortError') {
          return new Error('Request timed out - please try again');
        }
        
        if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
          return new Error('Network connection failed - check your internet connection');
        }
        
        if (error.message.includes('Authentication')) {
          return new Error('Invalid API key - please check your settings');
        }
        
        return new Error(`API Error: ${error.message}`);
      }
    }

    // Enhanced Local Model Handler with better initialization and fallback
    class LocalModelHandler {
      constructor() {
        this.generator = null;
        this.isLoading = false;
        this.loadAttempts = 0;
        this.maxAttempts = 3;
        this.isAvailable = false;
        this.lastError = null;
      }

      async initialize() {
        if (this.isLoading || this.generator) return;
        
        this.isLoading = true;
        this.loadAttempts++;
        
        const statusEl = document.getElementById('model-status');
        const progressBar = document.getElementById('progress-bar');
        
        try {
          this.updateStatus('🚀 Loading LaMini-T5 Model...', '#FFD700');
          progressBar.style.display = 'block';

          if (!this.isTransformersSupported()) {
            throw new Error('Transformers library not supported in this environment');
          }

          const transformers = await this.importWithTimeout();
          const { pipeline } = transformers;

          this.generator = await pipeline('text2text-generation', 'Xenova/LaMini-Flan-T5-248M', {
            progress_callback: (progress) => this.handleProgress(progress),
            device: 'webgpu',
            dtype: 'fp16'
          });

          await this.performModelTest();
          
          progressBar.style.display = 'none';
          this.updateStatus('✅ LaMini-T5 Ready', '#00C853');
          this.isAvailable = true;
          this.lastError = null;

        } catch (error) {
          console.error('Model initialization failed:', error);
          this.lastError = error;
          progressBar.style.display = 'none';
          this.handleInitializationError(error);
        } finally {
          this.isLoading = false;
        }
      }

      isTransformersSupported() {
        return (
          typeof Worker !== 'undefined' &&
          typeof WebAssembly !== 'undefined' &&
          typeof fetch !== 'undefined'
        );
      }

      async importWithTimeout(timeout = 15000) {
        return Promise.race([
          import('https://cdn.jsdelivr.net/npm/@xenova/transformers@2.17.2'),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Import timeout')), timeout)
          )
        ]);
      }

      handleProgress(progress) {
        const statusEl = document.getElementById('model-status');
        const progressFill = document.getElementById('progress-fill');
        
        if (progress.status === 'downloading') {
          const percent = Math.round((progress.loaded / progress.total) * 100);
          if (progressFill) progressFill.style.width = `${percent}%`;
          this.updateStatus(`📥 Downloading: ${percent}%`, '#2196F3');
        } else if (progress.status === 'loading') {
          this.updateStatus('⚡ Initializing model...', '#FF9800');
        } else if (progress.status === 'ready') {
          this.updateStatus('🔧 Preparing model...', '#9C27B0');
        }
      }

      async performModelTest() {
        if (!this.generator) throw new Error('Generator not initialized');
        
        try {
          const testResult = await this.generator('Test: Hello world', { 
            max_new_tokens: 5,
            temperature: 0.1 
          });
          
          if (!testResult || !testResult[0]?.generated_text) {
            throw new Error('Model test failed - no output generated');
          }
        } catch (error) {
          throw new Error(`Model test failed: ${error.message}`);
        }
      }

      handleInitializationError(error) {
        if (this.loadAttempts < this.maxAttempts) {
          const retryDelay = this.loadAttempts * 2000;
          this.updateStatus(`🔄 Retry ${this.loadAttempts}/${this.maxAttempts}...`, '#FF9800');
          setTimeout(() => this.initialize(), retryDelay);
        } else {
          this.updateStatus('❌ Model Load Failed', '#FF5252');
          console.error('Max initialization attempts reached:', error);
        }
      }

      async generateResponse(input) {
        if (!this.isAvailable || !this.generator) {
          if (!this.isLoading) {
            await this.initialize();
          }
          if (!this.generator) {
            throw new Error('Local model not available - please try cloud mode or demo mode');
          }
        }

        try {
          const prompt = this.buildPrompt(input);
          const startTime = Date.now();
          
          const result = await this.generator(prompt, {
            max_new_tokens: 150,
            temperature: 0.8,
            do_sample: true,
            top_p: 0.9,
            top_k: 50,
            repetition_penalty: 1.1,
            length_penalty: 1.0
          });

          const generationTime = Date.now() - startTime;
          console.log(`Generation completed in ${generationTime}ms`);

          return this.processResponse(result, prompt);

        } catch (error) {
          throw new Error(`Local model error: ${error.message}`);
        }
      }

      buildPrompt(input) {
        return `Question: ${input}\nAnswer:`;
      }

      processResponse(result, prompt) {
        if (!result || !result[0] || !result[0].generated_text) {
          throw new Error('No response generated from local model');
        }

        let response = result[0].generated_text;
        
        // Clean up the response by removing the prompt if it's included
        if (response.startsWith(prompt)) {
          response = response.substring(prompt.length).trim();
        }

        // Remove common artifacts
        response = response
          .replace(/^Answer:\s*/i, '')
          .replace(/^\s*[-–—]\s*/, '')
          .trim();

        if (!response || response.length < 3) {
          throw new Error('Generated response too short or empty');
        }

        return {
          content: response,
          model: 'LaMini-Flan-T5-248M',
          usage: { prompt_tokens: prompt.length, completion_tokens: response.length }
        };
      }

      updateStatus(message, color = '#666') {
        const statusEl = document.getElementById('model-status');
        if (statusEl) {
          statusEl.textContent = message;
          statusEl.style.color = color;
        }
      }

      getStatus() {
        return {
          isAvailable: this.isAvailable,
          isLoading: this.isLoading,
          lastError: this.lastError?.message,
          loadAttempts: this.loadAttempts
        };
      }
    }

    // Mock Model Handler for demonstration purposes
    class MockModelHandler {
      constructor() {
        this.responses = [
          "That's an interesting question! Based on current technological trends, I'd say innovation in AI continues to accelerate, particularly in areas like natural language processing and computer vision.",
          "Great point! From a research perspective, the juA.kali platform represents an exciting convergence of technology and practical application.",
          "Excellent question! In my analysis, this topic involves several key factors that we should consider carefully.",
          "That's a thoughtful inquiry. The intersection of technology and innovation often yields unexpected insights and opportunities.",
          "Fascinating topic! Current developments suggest we're seeing rapid advancement in this area, with significant implications for the future."
        ];
        this.isAvailable = true;
      }

      async initialize() {
        // Mock initialization - already ready
        return Promise.resolve();
      }

      async generateResponse(input) {
        // Simulate processing delay
        await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200));
        
        const randomResponse = this.responses[Math.floor(Math.random() * this.responses.length)];
        const contextualResponse = this.addContext(input, randomResponse);
        
        return {
          content: contextualResponse,
          model: 'Demo Mode',
          usage: { prompt_tokens: input.length, completion_tokens: contextualResponse.length }
        };
      }

      addContext(input, baseResponse) {
        const keywords = input.toLowerCase().match(/\b(ai|technology|innovation|research|development|future|science|engineering|data|machine learning|programming|software|hardware|digital|cyber|automation|robotics|blockchain|cloud|iot|analytics|algorithm)\b/g);
        
        if (keywords && keywords.length > 0) {
          const keyword = keywords[0];
          const contextPrefixes = {
            'ai': 'In the context of artificial intelligence, ',
            'technology': 'From a technological standpoint, ',
            'innovation': 'Regarding innovation, ',
            'research': 'From a research perspective, ',
            'development': 'In terms of development, ',
            'future': 'Looking toward the future, ',
            'science': 'Scientifically speaking, ',
            'engineering': 'From an engineering perspective, ',
            'data': 'When it comes to data, ',
            'programming': 'In programming terms, ',
            'software': 'Regarding software, ',
            'digital': 'In the digital realm, '
          };
          
          const prefix = contextPrefixes[keyword] || '';
          return prefix + baseResponse.toLowerCase().charAt(0) + baseResponse.slice(1);
        }
        
        return baseResponse;
      }

      getStatus() {
        return {
          isAvailable: true,
          isLoading: false,
          lastError: null
        };
      }
    }

    // Enhanced Chat Interface with better UI/UX
    class ChatInterface {
      constructor() {
        this.config = ConfigManager.load();
        this.apiClient = null;
        this.localModel = new LocalModelHandler();
        this.mockModel = new MockModelHandler();
        this.conversationHistory = [];
        this.isProcessing = false;
        
        this.initializeInterface();
        this.updateModelClient();
      }

      initializeInterface() {
        this.bindEventListeners();
        this.applyTheme();
        this.updateModelStatus();
        this.setupAutoInitialization();
      }

      bindEventListeners() {
        // Chat form submission
        const chatForm = document.getElementById('chat-form');
        if (chatForm) {
          chatForm.addEventListener('submit', (e) => this.handleSubmit(e));
        } else {
          console.warn('Chat form not found - chat submission disabled');
        }

        // Settings form
        const settingsForm = document.getElementById('settings-form');
        if (settingsForm) {
          settingsForm.addEventListener('submit', (e) => this.handleSettingsSubmit(e));
        } else {
          console.warn('Settings form not found - settings disabled');
        }

        // Model choice change
        const modelChoice = document.getElementById('model-choice');
        if (modelChoice) {
          modelChoice.addEventListener('change', () => this.handleModelChange());
        }

        // Theme toggle
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
          themeToggle.addEventListener('click', () => this.toggleTheme());
        }

        // Clear chat
        const clearChat = document.getElementById('clear-chat');
        if (clearChat) {
          clearChat.addEventListener('click', () => this.clearChat());
        }

        // Settings toggle
        const settingsToggle = document.getElementById('settings-toggle');
        const settingsModal = document.getElementById('settings-modal');
        if (settingsToggle && settingsModal) {
          settingsToggle.addEventListener('click', () => {
            settingsModal.style.display = settingsModal.style.display === 'block' ? 'none' : 'block';
          });
        }

        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
          const settingsModal = document.getElementById('settings-modal');
          if (e.target === settingsModal) {
            settingsModal.style.display = 'none';
          }
        });

        // Input auto-resize
        const messageInput = document.getElementById('message-input');
        if (messageInput) {
          messageInput.addEventListener('input', this.autoResizeTextarea);
        }
      }

      autoResizeTextarea(e) {
        const textarea = e.target;
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
      }

      setupAutoInitialization() {
        // Auto-initialize local model if selected
        if (this.config.modelChoice === 'local') {
          setTimeout(() => {
            this.localModel.initialize();
          }, 1000);
        }
      }

      async handleSubmit(e) {
        e.preventDefault();
        
        if (this.isProcessing) return;
        
        const messageInput = document.getElementById('message-input');
        const message = messageInput.value.trim();
        
        if (!message) return;
        
        try {
          this.isProcessing = true;
          this.updateSendButton(true);
          
          // Add user message to chat
          this.addMessage(message, 'user');
          messageInput.value = '';
          messageInput.style.height = 'auto';
          
          // Generate response
          const response = await this.generateResponse(message);
          this.addMessage(response.content, 'assistant', response.model);
          
        } catch (error) {
          console.error('Chat error:', error);
          this.addMessage(`Error: ${error.message}`, 'error');
        } finally {
          this.isProcessing = false;
          this.updateSendButton(false);
        }
      }

      async generateResponse(message) {
        switch (this.config.modelChoice) {
          case 'mindsdb':
            if (!this.apiClient) {
              throw new Error('API client not configured. Please check your settings.');
            }
            return await this.apiClient.sendMessage(message);
            
          case 'local':
            return await this.localModel.generateResponse(message);
            
          case 'mock':
          default:
            return await this.mockModel.generateResponse(message);
        }
      }

      addMessage(content, role, model = null) {
        const chatContainer = document.getElementById('chat-container');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}`;
        
        const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        
        let modelInfo = '';
        if (role === 'assistant' && model) {
          modelInfo = `<span class="model-info">${model}</span>`;
        }
        
        messageDiv.innerHTML = `
          <div class="message-content">
            ${this.formatMessage(content)}
          </div>
          <div class="message-meta">
            ${modelInfo}
            <span class="timestamp">${timestamp}</span>
          </div>
        `;
        
        chatContainer.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
        
        // Store in conversation history
        this.conversationHistory.push({ role, content, timestamp, model });
      }

      formatMessage(content) {
        // Basic markdown-like formatting
        return content
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
          .replace(/\*(.*?)\*/g, '<em>$1</em>')
          .replace(/`(.*?)`/g, '<code>$1</code>')
          .replace(/\n/g, '<br>');
      }

      updateSendButton(isLoading) {
        const sendButton = document.getElementById('send-button');
        const buttonText = sendButton.querySelector('.button-text');
        const buttonSpinner = sendButton.querySelector('.button-spinner');
        
        if (isLoading) {
          sendButton.disabled = true;
          buttonText.textContent = 'Sending...';
          buttonSpinner.style.display = 'inline-block';
        } else {
          sendButton.disabled = false;
          buttonText.textContent = 'Send';
          buttonSpinner.style.display = 'none';
        }
      }

      handleSettingsSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const newConfig = {
          apiKey: formData.get('api-key'),
          baseUrl: formData.get('base-url'),
          assistantId: formData.get('assistant-id'),
          modelChoice: formData.get('model-choice'),
          maxTokens: parseInt(formData.get('max-tokens')) || 300,
          temperature: parseFloat(formData.get('temperature')) || 0.7
        };

        const validation = ConfigManager.validate(newConfig);
        
        if (!validation.isValid) {
          alert('Configuration errors:\n' + validation.errors.join('\n'));
          return;
        }

        this.config = ConfigManager.save(newConfig);
        this.updateModelClient();
        this.updateModelStatus();
        
        // Close settings modal
        document.getElementById('settings-modal').style.display = 'none';
        
        this.showNotification('Settings saved successfully!', 'success');
      }

      handleModelChange() {
        const modelChoice = document.getElementById('model-choice').value;
        this.config.modelChoice = modelChoice;
        ConfigManager.save(this.config);
        this.updateModelClient();
        this.updateModelStatus();
        
        if (modelChoice === 'local' && !this.localModel.isAvailable) {
          this.localModel.initialize();
        }
      }

      updateModelClient() {
        if (this.config.modelChoice === 'mindsdb') {
          this.apiClient = new APIClient(this.config);
        } else {
          this.apiClient = null;
        }
      }

      updateModelStatus() {
        const statusEl = document.getElementById('model-status');
        if (!statusEl) return;

        switch (this.config.modelChoice) {
          case 'mindsdb':
            statusEl.textContent = '🌐 Cloud API Mode';
            statusEl.style.color = '#2196F3';
            break;
          case 'local':
            const localStatus = this.localModel.getStatus();
            if (localStatus.isLoading) {
              statusEl.textContent = '⏳ Loading Local Model...';
              statusEl.style.color = '#FF9800';
            } else if (localStatus.isAvailable) {
              statusEl.textContent = '🔧 Local Model Ready';
              statusEl.style.color = '#00C853';
            } else {
              statusEl.textContent = '❌ Local Model Failed';
              statusEl.style.color = '#FF5252';
            }
            break;
          case 'mock':
          default:
            statusEl.textContent = '🎭 Demo Mode';
            statusEl.style.color = '#9C27B0';
            break;
        }
      }

      toggleTheme() {
        const currentTheme = this.config.theme;
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        this.config.theme = newTheme;
        ConfigManager.save(this.config);
        this.applyTheme();
      }

      applyTheme() {
        document.body.className = `theme-${this.config.theme}`;
        
        // Update theme toggle button
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
          themeToggle.textContent = this.config.theme === 'dark' ? '☀️' : '🌙';
        }
      }

      clearChat() {
        const chatContainer = document.getElementById('chat-container');
        chatContainer.innerHTML = '';
        this.conversationHistory = [];
        this.showNotification('Chat cleared', 'info');
      }

      showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.classList.add('show');
        }, 100);
        
        setTimeout(() => {
          notification.classList.remove('show');
          setTimeout(() => {
            document.body.removeChild(notification);
          }, 300);
        }, 3000);
      }

      // Public method to get current configuration
      getConfig() {
        return { ...this.config };
      }

      // Public method to get conversation history
      getConversationHistory() {
        return [...this.conversationHistory];
      }
    }

    // Initialize the application when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      console.log('🚀 juA.kali AI Chat starting...');
      
      // Navigation event listeners
      const exploreButton = document.getElementById('explore-btn');
      if (exploreButton) {
        exploreButton.addEventListener('click', function () {
          window.location.href = 'secondary.html';
        });
      }

      const discoveriesTab = document.getElementById('discoveries-tab');
      if (discoveriesTab) {
        discoveriesTab.addEventListener('click', function () {
          window.location.href = 'QuorumDEEP.html';
        });
      }
      
       const coursesTab = document.getElementById('courses-tab');
  if (coursesTab) {
    coursesTab.addEventListener('click', function () {
      window.location.href = 'techskills.html';
    });
  }
  
  const consultationTab = document.getElementById('consultation-tab');
  if (consultationTab) {
    consultationTab.addEventListener('click', function () {
      window.location.href = 'tertiary.html';
    });
  }
  

      // Debug: Check for required chat elements
      const requiredElements = [
        'chat-container',
        'chat-form', 
        'message-input',
        'send-button'
      ];
      
      const missingElements = requiredElements.filter(id => !document.getElementById(id));
      
      if (missingElements.length === 0) {
        // All required elements found - initialize chat
        try {
          window.chatInterface = new ChatInterface();
          console.log('✅ Chat interface initialized successfully');
        } catch (error) {
          console.error('❌ Failed to initialize chat interface:', error);
          const chatContainer = document.getElementById('chat-container');
          if (chatContainer) {
            chatContainer.innerHTML = `
              <div style="padding: 20px; text-align: center; color: #ff5252;">
                <h2>Chat Initialization Error</h2>
                <p>Failed to start the chat interface: ${error.message}</p>
                <button onclick="location.reload()">Reload Page</button>
              </div>
            `;
          }
        }
      } else if (document.getElementById('chat-container')) {
        // Chat container exists but missing other elements
        console.warn('⚠️ Chat container found but missing required elements:', missingElements);
        console.log('💡 Creating minimal chat interface...');
        
        try {
          createMinimalChatInterface();
          window.chatInterface = new ChatInterface();
          console.log('✅ Minimal chat interface created and initialized');
        } catch (error) {
          console.error('❌ Failed to create minimal chat interface:', error);
        }
      } else {
        // No chat elements found - skip chat initialization
        console.log('ℹ️ No chat elements found - skipping chat initialization');
      }
    });

    // Export classes for potential external use
    window.JuAkaliAI = {
      ConfigManager,
      APIClient,
      LocalModelHandler,
      MockModelHandler,
      ChatInterface
    };
  </script>
</body>
</html>
